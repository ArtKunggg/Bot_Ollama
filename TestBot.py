from flask import Flask, request, jsonify, render_template
import mysql.connector
import ollama

app = Flask(__name__)

# üîß ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="Bot"
)

# üîÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
def get_db():
    global db
    if not db.is_connected():
        db.reconnect()
    return db

# ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
def extract_name_from_question(question):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT first_name FROM name")
    names = [row[0].lower() for row in cursor.fetchall()]
    cursor.close()

    for name in names:
        if name in question.lower():
            return name
    return None

# ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠
def search_name(keyword):
    conn = get_db()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM name WHERE first_name LIKE %s OR last_name LIKE %s",
                   (f"%{keyword}%", f"%{keyword}%"))
    result = cursor.fetchall()
    cursor.close()
    return result

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def get_department_info():
    conn = get_db()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM department")
    result = cursor.fetchall()
    cursor.close()
    return result

# ‚úÖ ‡∏à‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏≠‡∏ö
def search_memory(question):
    conn = get_db()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT answer FROM qa_memory WHERE question = %s", (question,))
    result = cursor.fetchone()
    cursor.close()
    return result['answer'] if result else None

def save_to_memory(question, answer):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO qa_memory (question, answer) VALUES (%s, %s)", (question, answer))
    conn.commit()
    cursor.close()

# ‚úÖ ‡∏ñ‡∏≤‡∏° Ollama
def ask_ollama(question, context):
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏à‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
{context}

‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
{question}

üìå ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
- ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

üß† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
"""

    response = ollama.chat(
        model="llama3:8b",
        messages=[{"role": "user", "content": prompt}]
    )
    return response['message']['content']


# ‚úÖ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏≤‡∏°/‡∏ï‡∏≠‡∏ö
@app.route("/ask", methods=["POST"])
def ask():
    data = request.json
    question = data.get("question", "").strip().lower()

    # ‚úÖ 1. ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô memory ‡∏Å‡πà‡∏≠‡∏ô
    cached_answer = search_memory(question)
    if cached_answer:
        return jsonify({"answer": cached_answer})

    conn = get_db()
    cursor = conn.cursor()

    # ‚úÖ 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    if "‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô" in question or "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô" in question:
        cursor.execute("SELECT COUNT(*) FROM name")
        count = cursor.fetchone()[0]
        return jsonify({"answer": f"‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {count} ‡∏Ñ‡∏ô‡∏Ñ‡πà‡∏∞"})

    if "‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•" in question or "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•" in question:
        cursor.execute("SELECT COUNT(DISTINCT email) FROM name")
        count = cursor.fetchone()[0]
        return jsonify({"answer": f"‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {count} ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ñ‡πà‡∏∞"})

    if "‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á" in question:
        cursor.execute("SELECT COUNT(*) FROM name WHERE gender = 'Female'")
        count = cursor.fetchone()[0]
        return jsonify({"answer": f"‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {count} ‡∏Ñ‡∏ô‡∏Ñ‡πà‡∏∞"})

    if "‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢" in question:
        cursor.execute("SELECT COUNT(*) FROM name WHERE gender = 'Male'")
        count = cursor.fetchone()[0]
        return jsonify({"answer": f"‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {count} ‡∏Ñ‡∏ô‡∏Ñ‡πà‡∏∞"})

    cursor.close()

    # ‚úÖ 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å
    if "‡πÅ‡∏ú‡∏ô‡∏Å" in question or "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó" in question:
        departments = get_department_info()
        context = "\n".join([f"{d['department']} - ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó {d['company']}" for d in departments])
        answer = ask_ollama(question, context)
        save_to_memory(question, answer)
        return jsonify({"answer": answer})

    # ‚úÖ 4. ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
    keyword = extract_name_from_question(question)
    if not keyword:
        return jsonify({"answer": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡πà‡∏∞"}), 404

    people = search_name(keyword)
    if not people:
        return jsonify({"answer": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞"}), 404

    context = "\n".join([
        f"{p['first_name']} {p['last_name']} - {p['email']} ({p['gender']})"
        for p in people
    ])

    answer = ask_ollama(question, context)
    save_to_memory(question, answer)
    return jsonify({"answer": answer})


# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å
@app.route("/")
def index():
    return render_template("index.html")

# ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô
if __name__ == "__main__":
    app.run(debug=True)
